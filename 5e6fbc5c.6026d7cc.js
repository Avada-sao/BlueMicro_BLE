(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{118:function(e,t,r){"use strict";r.d(t,"a",(function(){return s})),r.d(t,"b",(function(){return f}));var n=r(0),a=r.n(n);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=a.a.createContext({}),b=function(e){var t=a.a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},s=function(e){var t=b(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),s=b(r),d=n,f=s["".concat(i,".").concat(d)]||s[d]||p[d]||o;return r?a.a.createElement(f,l(l({ref:t},c),{},{components:r})):a.a.createElement(f,l({ref:t},c))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var c=2;c<o;c++)i[c]=r[c];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},83:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return i})),r.d(t,"metadata",(function(){return l})),r.d(t,"rightToc",(function(){return u})),r.d(t,"default",(function(){return b}));var n=r(2),a=r(6),o=(r(0),r(118)),i={id:"bluetooth_firmware",title:"A Bluetooth First Firmware",sidebar_label:"Bluetooth First",slug:"/bluetooth_firmware"},l={unversionedId:"bluetooth_firmware",id:"bluetooth_firmware",isDocsHomePage:!1,title:"A Bluetooth First Firmware",description:"Introduction",source:"@site/docs/bluetooth_firmware.md",slug:"/bluetooth_firmware",permalink:"/docs/bluetooth_firmware",editUrl:"https://github.com/jpconstantineau/BlueMicro_BLE/tree/documentation-docusaurus/documentation/docs/bluetooth_firmware.md",version:"current",sidebar_label:"Bluetooth First",sidebar:"someSidebar",previous:{title:"Getting Started",permalink:"/docs/"},next:{title:"Supported Processors",permalink:"/docs/hardware"}},u=[{value:"Introduction",id:"introduction",children:[]},{value:"Design Goals",id:"design-goals",children:[]}],c={rightToc:u};function b(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},c,r,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"introduction"},"Introduction"),Object(o.b)("p",null,"BlueMicro_BLE is a keyboard firmware that builds on top the Adafruit nRF52 board support package (BSP) for their line of ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/adafruit/Adafruit_nRF52_Arduino"}),"Adafruit nRF52 Feather Boards"),"."),Object(o.b)("p",null,"By starting with the simple ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/adafruit/Adafruit_nRF52_Arduino/blob/master/libraries/Bluefruit52Lib/examples/Peripheral/hid_keyboard/hid_keyboard.ino"}),"hid_keyboard.ino")," example provided with the library, we expanded it to a full blown Keyboard firmware with the following features:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Customizable matrix scanning with selectable number of rows/columns and diode direction"),Object(o.b)("li",{parentName:"ul"},"Re-map a rectangular NxM matrix to another shape with the same number of keys (a 60% maped to a 8x8 matrix)"),Object(o.b)("li",{parentName:"ul"},"Layers"),Object(o.b)("li",{parentName:"ul"},"Tap/Double-tap keys"),Object(o.b)("li",{parentName:"ul"},"Tap/Hold keys"),Object(o.b)("li",{parentName:"ul"},"Battery Level BLE service"),Object(o.b)("li",{parentName:"ul"},"Sleep after 10 minutes of inactivity (when connected - by default)"),Object(o.b)("li",{parentName:"ul"},"PWM LED Backlight. Control the brighness of LEDs.  To save power, they automatically dim after each keypress"),Object(o.b)("li",{parentName:"ul"},"Many other features...")),Object(o.b)("h2",{id:"design-goals"},"Design Goals"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Bluetooth First!"),Object(o.b)("li",{parentName:"ul"},"nRF52 features first!  Use peripherals included in the SoC instead of bit-banging and wasting CPU Cycles and burn battery for no reason."),Object(o.b)("li",{parentName:"ul"},"Must run on batteries "),Object(o.b)("li",{parentName:"ul"},"Low Power Consumption is key to long battery life"),Object(o.b)("li",{parentName:"ul"},"Keep latency in check"),Object(o.b)("li",{parentName:"ul"},"Don't copy/paste features from QMK or other firmware (licenses are different)")))}b.isMDXComponent=!0}}]);