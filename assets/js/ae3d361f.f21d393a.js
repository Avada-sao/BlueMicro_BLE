"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[1077],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return f}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(r),f=o,m=d["".concat(l,".").concat(f)]||d[f]||p[f]||a;return r?n.createElement(m,i(i({ref:t},c),{},{components:r})):n.createElement(m,i({ref:t},c))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var u=2;u<a;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},6940:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return c},default:function(){return d}});var n=r(7462),o=r(3366),a=(r(7294),r(3905)),i=["components"],s={id:"trouble_gpios",title:"Testing GPIOs"},l=void 0,u={unversionedId:"trouble/trouble_gpios",id:"trouble/trouble_gpios",title:"Testing GPIOs",description:"Prerequisites",source:"@site/docs/trouble/gpios.md",sourceDirName:"trouble",slug:"/trouble/trouble_gpios",permalink:"/docs/trouble/trouble_gpios",editUrl:"https://github.com/jpconstantineau/BlueMicro_BLE/tree/documentation-docusaurus/documentation/docs/trouble/gpios.md",tags:[],version:"current",frontMatter:{id:"trouble_gpios",title:"Testing GPIOs"},sidebar:"someSidebar",previous:{title:"Flashing/Uploading",permalink:"/docs/trouble/trouble_flash"},next:{title:"Testing keyboards",permalink:"/docs/trouble/trouble_keyboard"}},c=[{value:"Prerequisites",id:"prerequisites",children:[],level:2},{value:"Available Testers",id:"available-testers",children:[],level:2}],p={toc:c};function d(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"You can flash an Arduino Sketch (program) to your controller.  If not, go to ",(0,a.kt)("a",{parentName:"li",href:"/docs/trouble/trouble_flash"},"Flashing/Uploading"),".")),(0,a.kt)("h2",{id:"available-testers"},"Available Testers"),(0,a.kt)("p",null,"There are a few programs that can be flashed to the controller to help with troubleshooting your hardware and identify if the GPIOs are working correctly."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"https://github.com/jpconstantineau/BlueMicro_BLE/tree/master/arduino_tests/GPIO_Tester"},"GPIO Tester")),": scans all GPIOs and indicates what values it reads depending if internal pull-up or internal pull-down resistors are enabled."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"https://github.com/jpconstantineau/BlueMicro_BLE/tree/master/arduino_tests/board_tester"},"Board tester")),": Used for testing new BlueMmicro and BluMicro840 boards: will blink each GPIOs."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"https://github.com/jpconstantineau/BlueMicro_BLE/tree/master/arduino_tests/BlueMacro_board_tester"},"BlueMacro board tester")),": Used for testing new BlueMacro840 boards: will blink each GPIOs."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"https://github.com/jpconstantineau/BlueMicro_BLE/tree/master/arduino_tests/KB_Key_Tester"},"KB Key Tester")),": Scans each GPIOs and identifies which ones are connected. If they are connected through a diode, the positive and negative sides will be shown. If no diodes is present, GPIOs will be shown on both positive and negative GPIOs."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"https://github.com/jpconstantineau/BlueMicro_BLE/tree/master/arduino_tests/KB_Matrix_Tester"},"KB Matrix Tester")),":Scans each GPIOs and accumulates the detected positive and negative GPIOs into an array you can use in your hardware_config.h file. If no diodes are present, GPIOs will be shown on both positive and negative GPIOs.")),(0,a.kt)("p",null,"For an example of one of them, watch this video:"),(0,a.kt)("figure",{class:"video-container"},(0,a.kt)("iframe",{src:"//www.youtube.com/embed/BobS_HYZilM",frameborder:"0",allowfullscreen:!0,width:"100%"})))}d.isMDXComponent=!0}}]);